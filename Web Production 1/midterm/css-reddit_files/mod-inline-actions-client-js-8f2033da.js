import{j as t,c4 as e,c3 as o,dJ as n,bb as s,bA as i,ek as a,ed as r,el as d,p as l,eb as c,x as p,eg as h,cZ as m,$ as u,ec as b,ad as v,ef as y,ee as f,f as R,c as k,i as S,_ as A,n as w,t as $,s as g,e as O,bp as C,bW as P,D as x,a3 as I}from"./shell-e94b58e1.js";import"./faceplate-timeago-01f83db8.js";import{I as U}from"./mod-action-button-b18ae224.js";import{s as M}from"./icon-add-outline-90dbf27f.js";import{I as j}from"./icon-tag-outline-678e340d.js";import{I as z}from"./icon-lock-fill-ace5f15f.js";import{I as V}from"./icon-lock-outline-efd6d43f.js";import{I as B}from"./icon-pin-fill-6e01d7de.js";import{G as E}from"./icon-pin-outline-2574eb27.js";import"./shreddit-comment-share-button-8bb39eaf.js";import"./relative-date-0ad474cd.js";import"./icon-nsfw-outline-13dc5010.js";import"./icon-spoiler-outline-594d2c11.js";import"./icon-mod-outline-d2f5e5ee.js";import"./icon-remove-outline-0571f75e.js";import"./faceplate-bottom-sheet-6635ac01.js";import"./TinyGesture-32f2fddd.js";import"./faceplate-bottom-sheet-header-2e304719.js";import"./comments-c1c4d549.js";let D=class extends(t(g)){constructor(){super(...arguments),this.feedViewType=e.ModQueueCompactView,this.viewContext=o.CommentsPage,this.itemState=n.UNMODERATED,this.hasReports=!1,this.isModMode=!1,this.isRemoved=!1,this.isDeleted=!1,this.isLocked=!1,this.isStickied=!1,this.isCurrentUserAuthor=!1,this.hasParent=!1,this.isIconOnly=!1,this.hasRemovalReason=!1,this.permalink="",this.isDesktopViewport=!1,this.isSpamFilteredPost=!1,this.isProfilePost=!1,this.hasFlairPermissions=!1,this.borderedActionBar=!1,this.moderationState=n.UNMODERATED,this._handleThingUpdate=t=>{const e="commentId"in t?t.commentId:t.postId,{value:o}=t;if(e===this.thingId)switch(t.action){case i.approve:case s.approve:this.hasRemovalReason=!1,this.isRemoved=!1,this.moderationState=n.APPROVED;break;case i.remove:case i.removeAsSpam:case i.confirmRemoval:case s.remove:case s.removeAsSpam:case s.confirmRemoval:this.isRemoved=!0,this.moderationState=n.REMOVED;break;case i.addRemovalReason:case s.addRemovalReason:this.hasRemovalReason=!0;break;case i.lock:case s.lock:this.isLocked=o;break;case i.delete:this.isDeleted=o;break;case i.sticky:case s.sticky:this.isStickied=o}}}get isPost(){return a(this.thingId||"")}get isCompactView(){return this.feedViewType===e.CompactView}get isOnModqueuePage(){return this.viewContext===o.ModQueue||this.viewContext===o.ModQueueAll}get isApproved(){return this.moderationState===n.APPROVED}get shouldShowConfirmRemoval(){return r(this.moderationState,this.isSpamFilteredPost)}get shouldShowActionInline(){return d(this.viewContext,this.feedViewType)&&!this.isIconOnly}get isStickyable(){const t=!(this.viewContext===o.ProfileFeed||this.viewContext===o.ProfileFeed2),e=this.isCurrentUserAuthor&&!this.hasParent;return this.isPost?t:t&&e}connectedCallback(){super.connectedCallback(),this.moderationState=this.itemState,this.subscribe(this.isPost?l.PostUpdated:l.CommentUpdated,this._handleThingUpdate)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(this.isPost?l.PostUpdated:l.CommentUpdated,this._handleThingUpdate)}getApproveButtonAppearance(){return this.isCompactView?this.borderedActionBar?"bordered":"secondary":this.shouldShowConfirmRemoval||this.hasReports?"primary":(this.moderationState,n.REMOVED,"secondary")}renderApproveAction(){return(this.isModMode||this.isOnModqueuePage)&&c(this.moderationState)?p`\n <mod-action-button \n aria-label="Approve content" \n data-mod-action="${h.ApproveContent}" \n event-noun="approve" \n button-appearance="${this.getApproveButtonAppearance()}" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center" \n>${m({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">Approve</span>\n </mod-action-button>\n `:null}getRemoveButtonAppearance(){return this.isCompactView?this.borderedActionBar?"bordered":"secondary":(this.isApproved||this.hasReports,"secondary")}renderRemoveAction(){return(this.isModMode||this.isOnModqueuePage)&&b(this.moderationState)?p`\n <mod-action-button \n aria-label="Remove content" \n data-mod-action="${h.RemoveContent}" \n event-noun="remove" \n button-appearance="${this.getRemoveButtonAppearance()}" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center" \n>${v({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">\n Remove\n </span>\n </mod-action-button>\n `:null}renderConfirmRemovalAction(){return(this.isModMode||this.isOnModqueuePage)&&this.shouldShowConfirmRemoval?p`\n <mod-action-button \n aria-label="Confirm Removal" \n data-mod-action="${h.ConfirmRemoval}" \n event-noun="remove" \n button-appearance="secondary" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center" \n>${v({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">\n Confirm Removal\n </span>\n </mod-action-button>\n `:null}renderSpamAction(){return y(this.moderationState,this.isSpamFilteredPost,this.isRemoved)&&this.shouldShowActionInline?p`\n <mod-action-button \n aria-label="Remove content as spam" \n data-mod-action="${h.RemoveContentAsSpam}" \n event-noun="spam" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center" \n>${U({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">\n Spam\n </span>\n </mod-action-button>\n `:null}renderFlairAction(){return this.isPost&&this.shouldShowActionInline?p` <mod-action-button \n aria-label="Open post flair modal" \n data-mod-action="${h.OpenEditPostFlairModal}" \n event-noun="flair" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center" \n>${j({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">\n Flair\n </span>\n </mod-action-button>`:null}getAddRemovalReasonButtonAppearance(){return this.isCompactView&&this.borderedActionBar?"bordered":"secondary"}renderAddRemovalReasonAction(){return(this.isModMode||this.isOnModqueuePage)&&f(this.moderationState,this.hasRemovalReason,this.isSpamFilteredPost,this.isProfilePost)?p`\n <mod-action-button \n aria-label="Add removal reason" \n data-mod-action="${h.AddRemovalReason}" \n event-noun="add-removal-reason" \n button-appearance="${this.getAddRemovalReasonButtonAppearance()}" \n ?show-full-buttons="${!0}" \n>\n <span slot="icon" class="flex justify-center" \n>${M({attributes:{"aria-hidden":"true"},size:u.Small})}</span>\n <span slot="text">\n Add removal reason\n </span>\n </mod-action-button>\n ${this.isIconOnly?p`<div class="separator"></div>`:null}\n `:null}renderCopyLinkAction(){return this.shouldShowActionInline?this.isPost?p`<shreddit-post-share-button \n ?use-button="${!0}" \n ?is-desktop-viewport="${this.isDesktopViewport}" \n permalink="${this.permalink}" \n size="${R.Small}" \n ?show-full-buttons="${!this.isIconOnly}" \n></shreddit-post-share-button>`:p`<shreddit-comment-share-button \n slot="comment-share" \n ?use-button="${!0}" \n ?is-desktop-viewport="${this.isDesktopViewport}" \n permalink="${this.permalink}" \n ?show-full-buttons="${!this.isIconOnly}" \n></shreddit-comment-share-button>`:null}renderLockAction(){if(!this.shouldShowActionInline||this.isLocked)return null;const t=this.isPost?"Lock comments":"Lock comment";return p` <mod-action-button \n aria-label="${t}" \n data-mod-action="${h.Lock}" \n event-noun="lock" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center">\n ${V({attributes:{"aria-hidden":"true"},size:u.Small})}\n </span>\n <span slot="text"> ${t} </span>\n </mod-action-button>`}renderUnlockAction(){if(!this.shouldShowActionInline||!this.isLocked)return null;const t=this.isPost?"Unlock comments":"Unlock comment";return p` <mod-action-button \n aria-label="${t}" \n data-mod-action="${h.Unlock}" \n event-noun="unlock" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center">\n ${z({attributes:{"aria-hidden":"true"},size:u.Small})}\n </span>\n <span slot="text"> ${t} </span>\n </mod-action-button>`}renderStickyAction(){if(!this.isStickyable||!this.shouldShowActionInline||this.isStickied)return null;const t=this.isPost?"Sticky post":"Sticky comment";return p` <mod-action-button \n aria-label="${t}" \n data-mod-action="${h.Sticky}" \n event-noun="sticky" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center">\n ${E({attributes:{"aria-hidden":"true"},size:u.Small})}\n </span>\n <span slot="text"> ${t} </span>\n </mod-action-button>`}renderUnstickyAction(){if(!this.isStickyable||!this.shouldShowActionInline||!this.isStickied)return null;const t=this.isPost?"Unsticky post":"Unsticky comment";return p` <mod-action-button \n aria-label="${t}" \n data-mod-action="${h.Unsticky}" \n event-noun="unsticky" \n button-appearance="plain" \n ?show-full-buttons="${!this.isIconOnly}" \n>\n <span slot="icon" class="flex justify-center">\n ${B({attributes:{"aria-hidden":"true"},size:u.Small})}\n </span>\n <span slot="text"> ${t} </span>\n </mod-action-button>`}render(){return p`\n ${this.renderAddRemovalReasonAction()} ${this.renderApproveAction()}\n ${this.renderRemoveAction()} ${this.renderConfirmRemovalAction()} ${this.renderSpamAction()}\n ${this.renderFlairAction()} ${this.renderStickyAction()} ${this.renderUnstickyAction()}\n ${this.renderLockAction()} ${this.renderUnlockAction()} ${this.renderCopyLinkAction()}\n `}};D.styles=[k,S`:host{display:flex;gap:var(--spacer-xs)}.separator{border-left:1px solid rgb(0,0,0,.1);width:1px;height:32px}`],A([w({type:String,attribute:"thing-id"})],D.prototype,"thingId",void 0),A([w({type:String,attribute:"feed-view-type"})],D.prototype,"feedViewType",void 0),A([w({type:String,attribute:"view-context"})],D.prototype,"viewContext",void 0),A([w({type:String,attribute:"item-state"})],D.prototype,"itemState",void 0),A([w({type:Boolean,attribute:"has-reports"})],D.prototype,"hasReports",void 0),A([w({type:Boolean,attribute:"mod-mode"})],D.prototype,"isModMode",void 0),A([w({type:Boolean,attribute:"removed"})],D.prototype,"isRemoved",void 0),A([w({type:Boolean,attribute:"deleted"})],D.prototype,"isDeleted",void 0),A([w({type:Boolean,attribute:"locked"})],D.prototype,"isLocked",void 0),A([w({type:Boolean,attribute:"stickied"})],D.prototype,"isStickied",void 0),A([w({type:Boolean,attribute:"current-user-author"})],D.prototype,"isCurrentUserAuthor",void 0),A([w({type:Boolean,attribute:"has-parent"})],D.prototype,"hasParent",void 0),A([w({type:Boolean,attribute:"icon-only"})],D.prototype,"isIconOnly",void 0),A([w({type:Boolean,attribute:"has-removal-reason"})],D.prototype,"hasRemovalReason",void 0),A([w({type:String,attribute:"permalink"})],D.prototype,"permalink",void 0),A([w({type:Boolean,attribute:"is-desktop-viewport"})],D.prototype,"isDesktopViewport",void 0),A([w({type:Boolean,attribute:"is-spam-filtered-post"})],D.prototype,"isSpamFilteredPost",void 0),A([w({type:Boolean,attribute:"is-profile-post"})],D.prototype,"isProfilePost",void 0),A([w({type:Boolean,attribute:"has-flair-permissions"})],D.prototype,"hasFlairPermissions",void 0),A([w({type:Boolean,attribute:"bordered-action-bar"})],D.prototype,"borderedActionBar",void 0),A([$()],D.prototype,"moderationState",void 0),D=A([O("shreddit-mod-inline-actions")],D);const L=t(g);let F=class extends L{constructor(){super(...arguments),this.parentOfModVerdictSlotElementWidth=0,this.removed=!1,this.thingId="",this.minWidthToShowLabel=460,this.onCommentUpdateAction=t=>{if(t.commentId!==this.thingId)return;const{action:e}=t;switch(e){case s.approve:this.removed=!1;break;case s.remove:this.removed=!0}},this.onPostUpdateAction=t=>{if(t.postId!==this.thingId)return;const{action:e}=t;switch(e){case i.approve:this.removed=!1;break;case i.remove:this.removed=!0}}}connectedCallback(){super.connectedCallback(),this.initializeResizeObserver(),this.subscribe(l.PostUpdated,this.onPostUpdateAction),this.subscribe(l.CommentUpdated,this.onCommentUpdateAction)}disconnectedCallback(){this.cleanupResizeObserver(),super.disconnectedCallback(),this.unsubscribe(l.PostUpdated,this.onPostUpdateAction),this.unsubscribe(l.CommentUpdated,this.onCommentUpdateAction)}initializeResizeObserver(){this.parentOfModVerdictSlotElement=this.closest('[slot="mod-verdict"]')?.parentElement,this.parentOfModVerdictSlotElement&&(this.resizeObserver=new ResizeObserver((t=>{for(const e of t)this.parentOfModVerdictSlotElementWidth=e.contentRect.width})),this.resizeObserver.observe(this.parentOfModVerdictSlotElement))}cleanupResizeObserver(){this.resizeObserver&&this.parentOfModVerdictSlotElement&&this.resizeObserver.unobserve(this.parentOfModVerdictSlotElement)}render(){return p`\n <span class="inline-flex items-center gap-xs text-12 text-neutral-content w-full">\n <div class="relative">\n <slot name="verdict-indicator-avatar"></slot>\n <div \n aria-hidden="true" \n class="absolute bottom-0 -right-px flex justify-center items-center h-md w-md rounded-full border-solid border-md border-neutral-background scale-75 origin-bottom-right translate-y-px ${this.removed?"bg-red-200 text-red-700":"bg-kiwigreen-200 text-kiwigreen-700"}" \n>\n ${this.removed?P({size:u.ExtraSmall}):C({size:u.ExtraSmall})}\n </div>\n </div>\n ${this.shouldShowLabel?p`<slot name="verdict-indicator-label"></slot>`:""}\n </span>\n `}get shouldShowLabel(){return this.parentOfModVerdictSlotElementWidth>=this.minWidthToShowLabel}};F.styles=[k],A([$()],F.prototype,"parentOfModVerdictSlotElementWidth",void 0),A([$()],F.prototype,"parentOfModVerdictSlotElement",void 0),A([w({type:Boolean,reflect:!0})],F.prototype,"removed",void 0),A([w({type:String,attribute:"thing-id"})],F.prototype,"thingId",void 0),F=A([O("mod-verdict-indicator-component")],F);let T=class extends g{constructor(){super(...arguments),this.iconOnly=!1,this.pubsub=new x(this),this.handleCommentUpdate=({commentId:t,action:e,value:o})=>{if(t===this.thingId)switch(e){case s.addRemovalReason:this.hasRemovalReason=Boolean(o);break;case s.approve:this.hasRemovalReason=!0;break;case s.remove:case s.removeAsSpam:this.hasRemovalReason=!1}},this.handlePostUpdate=({postId:t,action:e,value:o})=>{if(t===this.thingId)switch(e){case i.addRemovalReason:this.hasRemovalReason=Boolean(o);break;case i.approve:this.hasRemovalReason=!0;break;case i.remove:case i.removeAsSpam:this.hasRemovalReason=!1}},this.updateModVerdict=t=>{const e=this.closest('[slot="mod-verdict"]');t?e?.setAttribute("show-removal-reason-cta",""):e?.removeAttribute("show-removal-reason-cta")}}connectedCallback(){super.connectedCallback();const t=this.closest('[slot="mod-verdict"]')?.parentElement;this.resizeObserver=new ResizeObserver((t=>{for(const e of t)e.contentRect.width<500?this.iconOnly=!0:this.iconOnly=!1})),this.resizeObserver.observe(t),this.pubsub.subscribe(l.CommentUpdated,this.handleCommentUpdate),this.pubsub.subscribe(l.PostUpdated,this.handlePostUpdate),this.updateModVerdict(!this.hasRemovalReason)}disconnectedCallback(){super.disconnectedCallback();const t=this.closest('[slot="mod-verdict"]')?.parentElement;this.resizeObserver.unobserve(t),this.resizeObserver.disconnect(),this.pubsub.unsubscribe(l.CommentUpdated,this.handleCommentUpdate),this.pubsub.unsubscribe(l.PostUpdated,this.handlePostUpdate)}updated(t){super.updated(t),t.has("hasRemovalReason")&&this.updateModVerdict(!this.hasRemovalReason)}render(){return this.hasRemovalReason?I:p`\n <mod-action-button \n aria-label="Add removal reason" \n data-mod-action="${h.AddRemovalReason}" \n event-noun="add-removal-reason" \n button-appearance="secondary" \n ?show-full-buttons="${!0}" \n>\n <span slot="icon" class="flex justify-center">\n ${M({attributes:{"aria-hidden":"true"},size:u.Small})}\n </span>\n <span slot="text" class="flex">\n ${this.iconOnly?M({attributes:{"aria-hidden":"true"},size:u.Small}):"Add removal reason"}\n </span>\n </mod-action-button>\n `}};T.styles=[k],A([w({type:String,attribute:"thing-id"})],T.prototype,"thingId",void 0),A([w({type:Boolean,attribute:"has-removal-reason"})],T.prototype,"hasRemovalReason",void 0),A([$()],T.prototype,"iconOnly",void 0),T=A([O("responsive-add-removal-reason-cta")],T);
//# sourceMappingURL=mod-inline-actions-client-js-8f2033da.js.map
